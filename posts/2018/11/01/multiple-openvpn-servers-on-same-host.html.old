<!DOCTYPE html>
<html lang="en">
<head>
	<title>Running Multiple Client Instances of OpenVPN on Linux</title>
  <meta name="description" content="How to run two or more OpenVPN server instances on the same host, and how to avoid having routes default should OpenVPN drop its connecton">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="I run multiple instances of OpenVPN providing VPN connectivity to endpoints provided by AirVPN, all on a single virtual machine.  I use theseendpoints on my ...">

  <meta property="og:site_name" content="nadie.io">
  
  <meta property="og:title" content="Running Multiple Client Instances of OpenVPN on Linux">
  <meta property="og:type" content="article">
  <meta property="og:description" content="I run multiple instances of OpenVPN providing VPN connectivity to endpoints provided by AirVPN, all on a single virtual machine.  I use these
endpoints on my home network WIFI for connectivity testing of clients as well as overall privacy and security.  The load for these VPNs, even at over 50 megabits of transfer, is pretty low so
using virtual machines made sense.  This also helps isolate the sessions off in their own little virtual world of 1 CPU core, 512 megabytes of memory and 2 VLANs.

This configuration is for Linux, and uses the alternative routing tables in the operating system.  A primary benefit of doing it that way is that it prevents OpenVPN from taking over the 
host’s primary routes, and if the tunnel fails, there isn’t any routing on that network.  No need for additional watchdog programs like vpnfailsafe or adding ufw rules to prevent leaks over the primary internet connection.  If the tunnel goes down, there is no route for that traffic.  This method works well for just one tunnel.

"/>
  
  
  <meta property="article:published_time" content="2018-11-01T15:19:22-04:00">
  <meta property="article:author" content="http://localhost:4000/about/">
  
  <meta property="og:url" content="http://localhost:4000/posts/2018/11/01/multiple-openvpn-servers-on-same-host.html" />
  
  <meta itemprop="keywords" content="linux,openvpn" />
  
  <meta property="article:tag" content="linux">
  
  <meta property="article:tag" content="openvpn">
  
  
  

   
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <link href="https://fonts.googleapis.com/css?family=Slabo+27px" rel="stylesheet">
  <style>
  .affix {
      top: 0;
      width: 100%;
      z-index: 9999 !important;
  }

  .affix + .container-fluid {
      padding-top: 70px;
  }
 </style>


  <!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-103574141-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-103574141-2');
</script>



</head>
<body>

<div id="bootstrap-nav" class="navbar navbar-default" data-spy="affix" data-offset-top="0" role="navigation">
    <div class="container-fluid">
            <div class="navbar-header"><a class="navbar-brand" href="https://rudn.com">[R]ather [U]seless [D]omain [N]ame</a>
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-menubuilder"><span class="sr-only">Toggle navigation</span><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span>
            </button>
        </div>
        <div class="collapse navbar-collapse navbar-menubuilder" style="text-align: center"> 
            <ul class="nav navbar-nav navbar-right">
            </ul>
        </div>
    </div>
</div>



<div class="container-fluid">
	<div class="row">
	<div class="col-sm-2"></div>
  		<div class="col-sm-8" style="margin-top: 1%;">
			<h2>Running Multiple Client Instances of OpenVPN on Linux</h2>
			<p>I run multiple instances of OpenVPN providing VPN connectivity to endpoints provided by <a href="https://airvpn.org/?referred_by=55509" title="AirVPN">AirVPN</a>, all on a single virtual machine.  I use these
endpoints on my home network WIFI for connectivity testing of clients as well as overall privacy and security.  The load for these VPNs, even at over 50 megabits of transfer, is pretty low so
using virtual machines made sense.  This also helps isolate the sessions off in their own little virtual world of 1 CPU core, 512 megabytes of memory and 2 VLANs.</p>

<p>This configuration is for Linux, and uses the alternative routing tables in the operating system.  A primary benefit of doing it that way is that it prevents OpenVPN from taking over the 
host’s primary routes, and if the tunnel fails, there isn’t any routing on that network.  No need for additional watchdog programs like <a href="https://github.com/wknapik/vpnfailsafe,&quot;vpnfailsafe&quot;">vpnfailsafe</a> or adding ufw rules to prevent leaks over the primary internet connection.  If the tunnel goes down, there is no route for that traffic.  This method works well for just one tunnel.</p>

<p>Lets assume you have two OpenVPN endpoints, one in Chicago and the other in Los Angeles.  Begin by getting basic working configurations for those tunnels either by setting up your
endpoints or having your VPN provider give you a configration.  Starting with Chicago, add the following to the OpenVPN config for that VPN.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dev tun0
route-nopull
script-security 2
up /etc/openvpn/chicago.post-up.sh
</code></pre></div></div>

<p>Name this configuration related to its endpoint, say <code>chicago.conf</code></p>

<p>This tells OpenVPN not to make itself the default route for all traffic on the host, to permit running a post-up script and that script is <code>chicago.post-up.sh</code>.<br />
This is critical when running multiple VPN instances on a single host because if it were not done this way, subsequent instances of OpenVPN would be routed OVER 
the tunnel of the first OpenVPN instance.  A cute trick on security maybe, but definitely performnce killing.</p>

<p>There is also an instruction to OpenVPN to use device <code>tun0</code> and not pick the first thing it finds.  This is so we know which device goes where when we set up 
routing and firewalling rules.</p>

<p>These configration items need to be made to the “Los Angeles” VPN configuration.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dev tun3
route-nopull
script-security 2
up /etc/openvpn/los_angeles.post-up.sh
</code></pre></div></div>

<p>Again, we’ve specified tunnel device <code>tun3</code>for this instance of OpenVPN, and gave its own post-up script.  Smartly name this config, say <code>losangeles.conf</code>.</p>

<h2 id="naming-interfaces">Naming Interfaces</h2>

<p>Each OpenVPN instance has its own tunnel interface and now it needs its own network interface.  I use 802.1q VLAN tagging, but it will also work with virtual interfaces.<br />
Replace the VLAN interfaces with whatever you decide to use.  Although I will say, managed switches are cheap and VLAN tagging adds some nice flexibility.  You can probably 
use VLAN tagging inside Linux KVM/QEMU or Microsoft Hyper-V (but not VMWare Player or Workstation) if you are going the virtual machine route.</p>

<p>Multiple instances of OpenVPN works because the post-up scripts set up NAT/forwarding and routing between an ethernet interface and a tunnel interface.  Here’s that voodoo.</p>

<h2 id="set-up-custom-routing-table">Set Up Custom Routing Table</h2>

<p>We’re going to be using IP forwarding, so run this command on your Linux host:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo </span>0 <span class="o">&gt;</span> /proc/sys/net/ipv4/ip_forward
</code></pre></div></div>

<p>And add it to sysctl.conf</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>net.ipv4.ip_forward <span class="o">=</span> 1
</code></pre></div></div>

<p>The configuration avoids usurping the default route because it uses its own routing table.  Run this bash command once for the “Chicago” VPN.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"10 vpn0"</span> <span class="o">&gt;&gt;</span> /etc/iproute2/rt_tables
</code></pre></div></div>

<p>And it needs to be run for the other tunnel as well, “Los Angeles”</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"11 vpn3 &gt;&gt; /etc/iproute2/rt_tables"</span>
</code></pre></div></div>

<p>These commands set up custom routing tables called <code>vpn0</code> (for tun0, obviously) and <code>vpn3</code>.  This only needs to be done once.</p>

<h3 id="configure-post-up-scripts">Configure Post-Up Scripts</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
/sbin/iptables <span class="nt">-t</span> nat <span class="nt">-A</span> POSTROUTING <span class="nt">-o</span> ens8.192 <span class="nt">-j</span> MASQUERADE
/sbin/iptables <span class="nt">-t</span> nat <span class="nt">-A</span> POSTROUTING <span class="nt">-o</span> tun0 <span class="nt">-j</span> MASQUERADE
/sbin/iptables <span class="nt">-A</span> FORWARD <span class="nt">-i</span> tun0 <span class="nt">-o</span> ens8.192 <span class="nt">-m</span> state <span class="nt">--state</span> RELATED,ESTABLISHED <span class="nt">-j</span> ACCEPT
/sbin/iptables <span class="nt">-A</span> FORWARD <span class="nt">-i</span> ens8.192 <span class="nt">-o</span> tun0 <span class="nt">-j</span> ACCEPT

/sbin/ip route flush table vpn0
ip rule add from 192.168.254.0/24 table vpn0
ip rule add to 192.168.254.0/24 table vpn0
/sbin/ip route show table main | <span class="nb">grep</span> <span class="nt">-Ev</span> ^default | <span class="k">while </span><span class="nb">read </span>ROUTE <span class="p">;</span> <span class="k">do </span>ip route add table vpn0 <span class="nv">$ROUTE</span><span class="p">;</span> <span class="k">done
</span><span class="nv">tunip</span><span class="o">=</span><span class="k">$(</span>ip addr show tun0 | <span class="nb">grep </span>inet | <span class="nb">grep</span> <span class="nt">-v</span> inet6 | <span class="nb">awk</span> <span class="o">{</span><span class="s1">'print $2'</span><span class="o">}</span> | <span class="nb">sed</span> <span class="s1">'s/\/[0-9][0-9]//'</span><span class="k">)</span>
/sbin/ip route add default via <span class="k">${</span><span class="nv">tunip</span><span class="k">}</span> dev tun0 table vpn0
</code></pre></div></div>

<p>This is the post-up script for <code>tun0</code> or “Chicago”.  What is happening here is that once the OpenVPN connection is set-up, it configures iptables for natting, accepts only established and related traffic and then populates the custom routing table.</p>

<p>Again, we’re tying <code>tun0</code> to VLAN device <code>ens8.192</code> so traffic from network 192.168.254.0/24 is routed through <code>tun0</code>.  Yes, we’ve essentially turned the Linux host into a router.</p>

<p>We’ll configure the other OpenVPN tunnel routing with a twist, it needs to accept inbound connections on a certain port for one host.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
/sbin/iptables <span class="nt">-t</span> nat <span class="nt">-A</span> POSTROUTING <span class="nt">-o</span> ens8.404 <span class="nt">-j</span> MASQUERADE
/sbin/iptables <span class="nt">-t</span> nat <span class="nt">-A</span> POSTROUTING <span class="nt">-o</span> tun3 <span class="nt">-j</span> MASQUERADE

iptables <span class="nt">-t</span> nat <span class="nt">-A</span> PREROUTING <span class="nt">-p</span> tcp <span class="nt">-i</span> tun3 <span class="nt">--dport</span> 35001 <span class="nt">-j</span> DNAT <span class="nt">--to-destination</span> 192.168.253.5:35001
iptables <span class="nt">-A</span> FORWARD <span class="nt">-p</span> tcp <span class="nt">-d</span> 192.168.253.5 <span class="nt">--dport</span> 35001 <span class="nt">-m</span> state <span class="nt">--state</span> NEW,ESTABLISHED,RELATED <span class="nt">-j</span> ACCEPT


/sbin/iptables <span class="nt">-A</span> FORWARD <span class="nt">-i</span> tun3 <span class="nt">-o</span> ens8.404 <span class="nt">-m</span> state <span class="nt">--state</span> RELATED,ESTABLISHED <span class="nt">-j</span> ACCEPT
/sbin/iptables <span class="nt">-A</span> FORWARD <span class="nt">-i</span> ens8.404 <span class="nt">-o</span> tun3 <span class="nt">-j</span> ACCEPT

/sbin/ip route flush table vpn3
ip rule add from 192.168.253.0/24 table vpn3
ip rule add to 192.168.253.0/24 table vpn3
/sbin/ip route show table main | <span class="nb">grep</span> <span class="nt">-Ev</span> ^default | <span class="k">while </span><span class="nb">read </span>ROUTE <span class="p">;</span> <span class="k">do </span>ip route add table vpn3 <span class="nv">$ROUTE</span><span class="p">;</span> <span class="k">done
</span><span class="nv">tunip</span><span class="o">=</span><span class="k">$(</span>ip addr show tun3 | <span class="nb">grep </span>inet | <span class="nb">grep</span> <span class="nt">-v</span> inet6 | <span class="nb">awk</span> <span class="o">{</span><span class="s1">'print $2'</span><span class="o">}</span> | <span class="nb">sed</span> <span class="s1">'s/\/[0-9][0-9]//'</span><span class="k">)</span>
/sbin/ip route add default via <span class="k">${</span><span class="nv">tunip</span><span class="k">}</span> dev tun3 table vpn3
</code></pre></div></div>

<p>Pretty much the same as the previous post-up script with the exception of the interfaces <code>tun3</code> and <code>ens8.404</code>.  Don’t ask about the VLAN tag assignments on my
network, I have no logical and sane explanation for using 404 other than I thought at one time it was funny to use 404.  It isn’t so funny now that I’m too lazy to go in and
change it.</p>

<p>There is a bit of DNAT magic pointing port 35001 to host 192.168.253.5, and this permits new connections from “Los Angeles” to route through the tunnel to this one host.</p>

<p>Now get systemd ready to start/stop each OpenVPN instance.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable </span>openvpn@chicago.service
systemctl <span class="nb">enable </span>openvpn@losangeles.service
</code></pre></div></div>

<p>My host provides routing for the entire VLAN, which appears on my Ubiquity Unifi access point.</p>

			<br><br>
			<br><br><br><br>
			<div class="footer">
			</div>
  		</div>
  		<div class="col-sm-2"></div>
	</div>
        <br>
</div>
</body>
</html>
